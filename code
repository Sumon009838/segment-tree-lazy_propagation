void build(int ind,int low,int high)
{
    if(low==high)
    {
        seg[ind]=ar[low];
        return;
    }
    int mid=(low+high)/2;
    build(2*ind,low,mid);
    build(2*ind+1,mid+1,high);
    seg[ind]=seg[ind*2]+seg[ind*2+1];
}
void rangeupdate(ll ind,ll low,ll high,ll l,ll r,ll val)
{
    if(lazy[ind]!=0)
    {
        seg[ind]+=(high-low+1)*lazy[ind];
        if(low!=high)
        {
            lazy[2*ind]+=lazy[ind];
            lazy[2*ind+1]+=lazy[ind];
        }
        lazy[ind]=0;
    }
    if(r<low||l>high||low>high)
    {
        return;
    }
    if(low>=l&&high<=r)
    {
        seg[ind]+=(high-low+1)*val;
        if(low!=high)
        {
            lazy[2*ind]+=val;
            lazy[2*ind+1]+=val;
        }
        return;
    }
    ll mid=(low+high)/2;
    rangeupdate(2*ind,low,mid,l,r,val);
    rangeupdate(2*ind+1,mid+1,high,l,r,val);
    seg[ind]=seg[2*ind]+seg[2*ind+1];
}
ll lazysum(ll ind,ll low,ll high,ll l,ll r)
{
    if(lazy[ind]!=0)
    {
        seg[ind]+=(high-low+1)*lazy[ind];
        if(low!=high)
        {
            lazy[2*ind]+=lazy[ind];
            lazy[2*ind+1]+=lazy[ind];
        }
        lazy[ind]=0;
    }
    if(low>=l&&high<=r)
    {
        return seg[ind];
    }
    if(high<l||low>r)
    {
        return 0;
    }
    ll mid=(low+high)/2;
    ll left=lazysum(ind*2,low,mid,l,r);
    ll right=lazysum(ind*2+1,mid+1,high,l,r);
    return left+right;
}
